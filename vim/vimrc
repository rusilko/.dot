set nocompatible                " choose no compatibility with legacy vi
call pathogen#infect()          " Use pathogen for bundle management
let mapleader="\<Space>"        " Set the best leader
set re=1                        " Set old regex engine: http://stackoverflow.com/questions/16902317/vim-slow-with-ruby-syntax-highlighting
syntax on

"" Solarized color theme settings
set background=dark                                  " Solarized with dark background
let g:solarized_hitrail=1                            " trailing spaces highlight
colorscheme solarized
so ~/.dot/vim/bundle/Solarized/autoload/togglebg.vim " autload bg toggle plugin

"" Ggeneral settings
set encoding=utf-8
set showcmd                     " show partial commands below the status line
set ruler                       " show the cursor position all the time
" set cursorline                  " highlight the line of the cursor
set scrolloff=3                 " have some context around the current line always on screen
filetype plugin indent on       " load file type plugins + indentation

"" Whitespace
set nowrap                      " don't wrap lines
set tabstop=2 shiftwidth=2      " a tab is two spaces
set expandtab                   " use spaces, not tabs
set backspace=indent,eol,start  " backspace through everything in insert mode

"" Searching
set hlsearch                    " highlight matches
set incsearch                   " incremental searching
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter

"" Escaping from instert mode
inoremap jj <ESC>
inoremap kk <ESC>

"" Easier buffers switching
nnoremap <leader><leader> <C-^>

" Easier navigation between split windows
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

inoremap <c-j> <c-o>j
inoremap <c-k> <c-o>k
inoremap <c-h> <c-o>h
inoremap <c-l> <c-o>l

" Easier navigation between tabs
nnoremap <s-h> gT
nnoremap <s-l> gt

" Get off my lawn
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>
nnoremap ;q<CR> :echoe "use a fucking shift!"<CR>
nnoremap ;w<CR> :echoe "use a fucking shift!"<CR>
nnoremap <c-space> :q!<CR>

"" NERDTree
map <C-e> :NERDTreeToggle<CR>
" open NERDTree in new windows if no command line args set
" autocmd VimEnter * if !argc() | NERDTree | endif

"" Tab completion
" will insert tab at beginning of line,
" will use completion if not at beginning
set wildmode=list:longest,list:full
set complete=.,w,t,b
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
 endif
endfunction
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>

" 80th and 120th column indicator
let &colorcolumn="121"

" move above and enter instert mode
inoremap jk <ESC><S-o>

" set mouse scrolling and clicking inside vim
set mouse=a

" display statusline all the time
set laststatus=2

" display special characters in status line
let g:airline_powerline_fonts=1

"" Ack
" use silver searcher intead of ack
let g:ackprg = 'ag --nogroup --nocolor --column'
" prevent :Ack from leaving search output in the shell
set shellpipe=&>
:command Aa Ack!
:command Ag Ack!
:command Ack Ack!

" don't use Ex mode, use Q for formatting
map Q gq

" clear the search buffer when hitting return
:nnoremap <CR> :nohlsearch<cr>

" toggle the current fold
:nnoremap <Space> za

" set fold method and automatically open all folds
" autocmd Syntax ruby,rb,haml setlocal foldmethod=syntax
" autocmd Syntax ruby,rb,haml normal zR
" au FileType javascript call JavaScriptFold()

" yank to system clipboard
map <leader>y "*y

" line numbers on/off
map <leader>nl :set nornu invnumber<CR>
" paste lines from unnamed register and fix indentation
nmap <leader>p pV`]=
nmap <leader>P PV`]=

" open ctag in tab/vertical split
map <leader><C-]> :vsp<CR>:exec("tag ".expand("<cword>"))<CR>

" javascript niceties
autocmd FileType javascript inoremap (; ();<Esc>hi
autocmd FileType javascript inoremap {-<CR> {<CR>}<Esc><S-o>
autocmd FileType javascript inoremap ({<CR> ({<CR>});<Esc><S-o>
autocmd FileType javascript inoremap ((<CR> ({<CR>});<Esc><S-o>
autocmd FileType coffee inoremap db<CR> debugger<Esc>:w<CR>
autocmd FileType coffee inoremap log<CR> console.log("")<Esc><C-h>i

" ruby niceties
autocmd FileType ruby inoremap do<CR> do<CR>end<Esc><S-o>
autocmd FileType ruby inoremap bb<CR> binding.pry<Esc>:w<CR>


" ctrlp ignore list
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows

let g:ctrlp_custom_ignore = '\v[\/]\.(git|node_modules|hg|svn)$'

nnoremap <leader>d :tabnew<CR>

" vim-test mappings
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>a :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>

" hard time
let g:hardtime_default_on = 0
let g:hardtime_ignore_quickfix = 1
nnoremap <leader>h <Esc>:HardTimeToggle<CR>


" relative line numbers
set relativenumber
set number
function! NumberToggle()
  if(&relativenumber == 1)
    set nornu
  else
    set relativenumber
    set number
  endif
endfunc

nnoremap <leader>n :call NumberToggle()<cr>
